"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General config 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=UTF-8

set number relativenumber     " turn hybrid line numbers on
set cursorline                " Highlight cursorline
set textwidth=80              " Make it obvious where 80 characters is
set colorcolumn=+1

set mouse=a
set autoread                  " Set to auto read when a file is changed from the outside
set noswapfile
set clipboard=unnamed         " Use the OS clipboard by default 
set backspace=indent,eol,start    " Allow backspace in insert mode
set whichwrap+=<,>,h,l
set hid                       " A buffer becomes hidden when it is abandoned

filetype indent on            " Enable filetype plugins
filetype plugin on
syntax enable

set autoindent                " Auto-indent new lines
set expandtab                 " Use spaces instead of tabs
set shiftwidth=2              " Number of auto-indent spaces
set smartindent               " Enable smart-indent
set smarttab                  " Enable smart-tabs
set softtabstop=2             " Number of spaces per Tab

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

set hlsearch                  " Highlight all search results
set smartcase                 " Enable smart-case search
set ignorecase                " Always case-insensitive
set incsearch                 " Searches for strings incrementally

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map key
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=","

:imap jk <Esc>

" Map key yank and paste clipboard
:vmap <C-C> "+y
:vmap gy "+y
:nmap gy "+y
:nmap gp "+p

" Close the current buffer
map <leader>bx :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tc :tabnew<cr>
map <leader>tx :tabclose<cr>
map <leader>tn :tabnext<cr>
map <leader>tm :tabmove
map <leader>to :tabonly<cr>

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>"

" Map leader split windows
map <leader>sv <C-W>v
map <leader>ss <C-W>s

" Turn off search highlight
map <silent> <leader><cr> :noh<cr>

" NERDTree
map <leader>nn :NERDTreeToggle<cr>
map <leader>nb :NERDTreeFromBookmark<Space>
map <leader>nf :NERDTreeFind<cr>
map <leader>nr :NERDTreeRefreshRoot<cr>

" Ack
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
" Main plugin
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'
Plug 'easymotion/vim-easymotion'

" Small tool
Plug 'christoomey/vim-system-copy'

" For Rails
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'neoclide/coc-solargraph', {'do': 'yarn install --frozen-lockfile'}

" Frontend
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'pangloss/vim-javascript'
Plug 'ap/vim-css-color'

" UI
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'

" other
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin config 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Scheme
colorscheme gruvbox
let g:gruvbox_contrast_dark='hard'
set background=dark

" Airline config
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='deus'
" let g:airline_powerline_fonts = 1
let g:airline_left_sep = '▓▒░'
let g:airline_left_alt_sep = '▒'
let g:airline_right_sep = '░▒▓'
let g:airline_right_alt_sep = '░'

" NERDTree
let g:NERDTreeMouseMode=3
let NERDTreeShowHidden=1      " Show hidden file
let NERDTreeIgnore=['.git']
let g:NERDTreeMapJumpPrevSibling=""
let g:NERDTreeMapJumpNextSibling=""
let NERDTreeMapOpenSplit='s'
let NERDTreeMapOpenVSplit='v'

" Open NERDTree when open directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Coc.nvim setting
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <C-j>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" CtrlP Fuzzy Search
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:ctrlp_custom_ignore = 'node_modules\|^\.DS_Store\|^\.git\|^\.coffee'

" Ale plugin
let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1
let g:ale_fixers = {
  \ 'javascript': ['prettier'],
  \ 'css': ['prettier'],
\}

" Function
" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction
